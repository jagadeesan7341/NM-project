import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.optimizers import Adam

# Constants
IMG_SIZE = 128
DATA_DIR = 'neu_dataset/NEU Surface Defect Database'

# Map folder names to labels
class_labels = {
    'crazing': 0,
    'inclusion': 1,
    'patches': 2,
    'pitted_surface': 3,
    'rolled-in_scale': 4,
    'scratches': 5
}

# Load images and labels
def load_data():
    images = []
    labels = []
    for folder in class_labels.keys():
        path = os.path.join(DATA_DIR, folder)
        for img_file in os.listdir(path):
            img_path = os.path.join(path, img_file)
            img = cv2.imread(img_path)
            img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
            images.append(img)
            labels.append(class_labels[folder])
    return np.array(images), np.array(labels)

# Prepare data
X, y = load_data()
X = X / 255.0  # Normalize
y = to_categorical(y, num_classes=6)

# Split into train/test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build CNN
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(6, activation='softmax')  # 6 defect classes
])

# Compile model
model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

# Train model
model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))

# Save model
model.save("surface_defect_model.h5")






from tensorflow.keras.models import load_model

model = load_model("surface_defect_model.h5")

def predict_defect(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
    img = img / 255.0
    img = np.expand_dims(img, axis=0)

    prediction = model.predict(img)
    class_idx = np.argmax(prediction)
    label_map = {v: k for k, v in class_labels.items()}
    print("Predicted defect:", label_map[class_idx])

# Test with a sample image
predict_defect('neu_dataset/NEU Surface Defect Database/scratches/SCRATCHES_1.jpg')
